
Tone.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000038a  0000041e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800106  00800106  00000424  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000864  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000071c  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031f  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001764  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f0  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000129  00000000  00000000  00001be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001d09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e8       	ldi	r30, 0x8A	; 138
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b4 00 	call	0x168	; 0x168 <main>
  9e:	0c 94 c3 01 	jmp	0x386	; 0x386 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setupToneGenerator>:
// setup CTC mode to generate tone. Must also call playSound to start the tone.
void setupToneGenerator()
{
	
	// setup port direction so that OC1A i.e., port PB1 can be toggled.
	DDRB |= 1<<PORTB1;
  a6:	21 9a       	sbi	0x04, 1	; 4
	
	// toggle OC1A pin on compare match. non pwm
	TCCR1A |= (1 <<COM1A0);
  a8:	e0 e8       	ldi	r30, 0x80	; 128
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	
	// CTC mode clear timer on compare match. mode 4
	// TCCR1A bit 0 & 1 are zero & TCCR1B bit 3 is 1.
	TCCR1B |= (1<<WGM12);
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	88 60       	ori	r24, 0x08	; 8
  ba:	80 83       	st	Z, r24
	
	// set compare value
	TCNT1 = 0;
  bc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  c0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	OCR1A = _tonegenOC1A;
  c4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_tonegenOC1A>
  c8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_tonegenOC1A+0x1>
  cc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	// setup interrupt on compare match OCR1A
	TIMSK1 |= 1<< OCIE1A;
  d4:	ef e6       	ldi	r30, 0x6F	; 111
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	80 83       	st	Z, r24
	
	sei();
  de:	78 94       	sei
  e0:	08 95       	ret

000000e2 <__vector_11>:

	TCCR1B |= (1<<CS11);
}

ISR(TIMER1_COMPA_vect)
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	2f 93       	push	r18
  ee:	3f 93       	push	r19
  f0:	4f 93       	push	r20
  f2:	5f 93       	push	r21
  f4:	6f 93       	push	r22
  f6:	7f 93       	push	r23
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
  fc:	af 93       	push	r26
  fe:	bf 93       	push	r27
 100:	ef 93       	push	r30
 102:	ff 93       	push	r31
	// change OCRA to a new frequency. It is done in the interrupt to avoid comparing compa with a non zero timer counter.
	if (_instrumentName == 1)
 104:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	89 f4       	brne	.+34     	; 0x12e <__vector_11+0x4c>
	{
		OCR1A = rand()%1000 + 100;	
 10c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <rand>
 110:	68 ee       	ldi	r22, 0xE8	; 232
 112:	73 e0       	ldi	r23, 0x03	; 3
 114:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <__divmodhi4>
 118:	8c 59       	subi	r24, 0x9C	; 156
 11a:	9f 4f       	sbci	r25, 0xFF	; 255
 11c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 120:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		TCNT1 = 0;
 124:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 128:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 12c:	0c c0       	rjmp	.+24     	; 0x146 <__vector_11+0x64>
	}
	else
	{
		OCR1A = _tonegenOC1A;
 12e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_tonegenOC1A>
 132:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_tonegenOC1A+0x1>
 136:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 13a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		TCNT1 = 0;
 13e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 142:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	}
	
}
 146:	ff 91       	pop	r31
 148:	ef 91       	pop	r30
 14a:	bf 91       	pop	r27
 14c:	af 91       	pop	r26
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	7f 91       	pop	r23
 154:	6f 91       	pop	r22
 156:	5f 91       	pop	r21
 158:	4f 91       	pop	r20
 15a:	3f 91       	pop	r19
 15c:	2f 91       	pop	r18
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <main>:


int main(void)
{
	
	setupToneGenerator();
 168:	0e 94 53 00 	call	0xa6	; 0xa6 <setupToneGenerator>
{
	_instrumentName = instrumentName;
}
inline void setNote(uint16_t note)
{
	_tonegenOC1A = note;
 16c:	8d e4       	ldi	r24, 0x4D	; 77
 16e:	9d e0       	ldi	r25, 0x0D	; 13
 170:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_tonegenOC1A+0x1>
 174:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_tonegenOC1A>
	// Select clock source and prescalaing. this will start the timer.
	//TCCR1B |= (1<< CS11);
}
inline void setInstrument(uint8_t instrumentName)
{
	_instrumentName = instrumentName;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	_tonegenOC1A = 1000000/freq;	
}

inline void stopSound()
{
	TCCR1B &= ~(1<< CS11);
 17e:	e1 e8       	ldi	r30, 0x81	; 129
 180:	f0 e0       	ldi	r31, 0x00	; 0
	TCNT1 = 0;
 182:	a4 e8       	ldi	r26, 0x84	; 132
 184:	b0 e0       	ldi	r27, 0x00	; 0
	_tonegenOC1A = 1000000/freq;	
}

inline void stopSound()
{
	TCCR1B &= ~(1<< CS11);
 186:	80 81       	ld	r24, Z
 188:	8d 7f       	andi	r24, 0xFD	; 253
 18a:	80 83       	st	Z, r24
	TCNT1 = 0;
 18c:	11 96       	adiw	r26, 0x01	; 1
 18e:	1c 92       	st	X, r1
 190:	1e 92       	st	-X, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	2f ef       	ldi	r18, 0xFF	; 255
 194:	84 e6       	ldi	r24, 0x64	; 100
 196:	94 e0       	ldi	r25, 0x04	; 4
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0x30>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x3a>
 1a2:	00 00       	nop

// must call each time stop is called otherwise tone will not generate.
inline void startSound()
{

	TCCR1B |= (1<<CS11);
 1a4:	80 81       	ld	r24, Z
 1a6:	82 60       	ori	r24, 0x02	; 2
 1a8:	80 83       	st	Z, r24
 1aa:	8f e3       	ldi	r24, 0x3F	; 63
 1ac:	9c e9       	ldi	r25, 0x9C	; 156
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <main+0x46>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x4c>
 1b4:	00 00       	nop
 1b6:	e7 cf       	rjmp	.-50     	; 0x186 <main+0x1e>

000001b8 <__divmodhi4>:
 1b8:	97 fb       	bst	r25, 7
 1ba:	07 2e       	mov	r0, r23
 1bc:	16 f4       	brtc	.+4      	; 0x1c2 <__divmodhi4+0xa>
 1be:	00 94       	com	r0
 1c0:	07 d0       	rcall	.+14     	; 0x1d0 <__divmodhi4_neg1>
 1c2:	77 fd       	sbrc	r23, 7
 1c4:	09 d0       	rcall	.+18     	; 0x1d8 <__divmodhi4_neg2>
 1c6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <__udivmodhi4>
 1ca:	07 fc       	sbrc	r0, 7
 1cc:	05 d0       	rcall	.+10     	; 0x1d8 <__divmodhi4_neg2>
 1ce:	3e f4       	brtc	.+14     	; 0x1de <__divmodhi4_exit>

000001d0 <__divmodhi4_neg1>:
 1d0:	90 95       	com	r25
 1d2:	81 95       	neg	r24
 1d4:	9f 4f       	sbci	r25, 0xFF	; 255
 1d6:	08 95       	ret

000001d8 <__divmodhi4_neg2>:
 1d8:	70 95       	com	r23
 1da:	61 95       	neg	r22
 1dc:	7f 4f       	sbci	r23, 0xFF	; 255

000001de <__divmodhi4_exit>:
 1de:	08 95       	ret

000001e0 <__udivmodhi4>:
 1e0:	aa 1b       	sub	r26, r26
 1e2:	bb 1b       	sub	r27, r27
 1e4:	51 e1       	ldi	r21, 0x11	; 17
 1e6:	07 c0       	rjmp	.+14     	; 0x1f6 <__udivmodhi4_ep>

000001e8 <__udivmodhi4_loop>:
 1e8:	aa 1f       	adc	r26, r26
 1ea:	bb 1f       	adc	r27, r27
 1ec:	a6 17       	cp	r26, r22
 1ee:	b7 07       	cpc	r27, r23
 1f0:	10 f0       	brcs	.+4      	; 0x1f6 <__udivmodhi4_ep>
 1f2:	a6 1b       	sub	r26, r22
 1f4:	b7 0b       	sbc	r27, r23

000001f6 <__udivmodhi4_ep>:
 1f6:	88 1f       	adc	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	5a 95       	dec	r21
 1fc:	a9 f7       	brne	.-22     	; 0x1e8 <__udivmodhi4_loop>
 1fe:	80 95       	com	r24
 200:	90 95       	com	r25
 202:	bc 01       	movw	r22, r24
 204:	cd 01       	movw	r24, r26
 206:	08 95       	ret

00000208 <do_rand>:
 208:	8f 92       	push	r8
 20a:	9f 92       	push	r9
 20c:	af 92       	push	r10
 20e:	bf 92       	push	r11
 210:	cf 92       	push	r12
 212:	df 92       	push	r13
 214:	ef 92       	push	r14
 216:	ff 92       	push	r15
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	ec 01       	movw	r28, r24
 21e:	68 81       	ld	r22, Y
 220:	79 81       	ldd	r23, Y+1	; 0x01
 222:	8a 81       	ldd	r24, Y+2	; 0x02
 224:	9b 81       	ldd	r25, Y+3	; 0x03
 226:	61 15       	cp	r22, r1
 228:	71 05       	cpc	r23, r1
 22a:	81 05       	cpc	r24, r1
 22c:	91 05       	cpc	r25, r1
 22e:	21 f4       	brne	.+8      	; 0x238 <do_rand+0x30>
 230:	64 e2       	ldi	r22, 0x24	; 36
 232:	79 ed       	ldi	r23, 0xD9	; 217
 234:	8b e5       	ldi	r24, 0x5B	; 91
 236:	97 e0       	ldi	r25, 0x07	; 7
 238:	2d e1       	ldi	r18, 0x1D	; 29
 23a:	33 ef       	ldi	r19, 0xF3	; 243
 23c:	41 e0       	ldi	r20, 0x01	; 1
 23e:	50 e0       	ldi	r21, 0x00	; 0
 240:	0e 94 60 01 	call	0x2c0	; 0x2c0 <__divmodsi4>
 244:	49 01       	movw	r8, r18
 246:	5a 01       	movw	r10, r20
 248:	9b 01       	movw	r18, r22
 24a:	ac 01       	movw	r20, r24
 24c:	a7 ea       	ldi	r26, 0xA7	; 167
 24e:	b1 e4       	ldi	r27, 0x41	; 65
 250:	0e 94 7f 01 	call	0x2fe	; 0x2fe <__muluhisi3>
 254:	6b 01       	movw	r12, r22
 256:	7c 01       	movw	r14, r24
 258:	ac ee       	ldi	r26, 0xEC	; 236
 25a:	b4 ef       	ldi	r27, 0xF4	; 244
 25c:	a5 01       	movw	r20, r10
 25e:	94 01       	movw	r18, r8
 260:	0e 94 8d 01 	call	0x31a	; 0x31a <__mulohisi3>
 264:	dc 01       	movw	r26, r24
 266:	cb 01       	movw	r24, r22
 268:	8c 0d       	add	r24, r12
 26a:	9d 1d       	adc	r25, r13
 26c:	ae 1d       	adc	r26, r14
 26e:	bf 1d       	adc	r27, r15
 270:	b7 ff       	sbrs	r27, 7
 272:	03 c0       	rjmp	.+6      	; 0x27a <do_rand+0x72>
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	a1 09       	sbc	r26, r1
 278:	b0 48       	sbci	r27, 0x80	; 128
 27a:	88 83       	st	Y, r24
 27c:	99 83       	std	Y+1, r25	; 0x01
 27e:	aa 83       	std	Y+2, r26	; 0x02
 280:	bb 83       	std	Y+3, r27	; 0x03
 282:	9f 77       	andi	r25, 0x7F	; 127
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	ff 90       	pop	r15
 28a:	ef 90       	pop	r14
 28c:	df 90       	pop	r13
 28e:	cf 90       	pop	r12
 290:	bf 90       	pop	r11
 292:	af 90       	pop	r10
 294:	9f 90       	pop	r9
 296:	8f 90       	pop	r8
 298:	08 95       	ret

0000029a <rand_r>:
 29a:	0e 94 04 01 	call	0x208	; 0x208 <do_rand>
 29e:	08 95       	ret

000002a0 <rand>:
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	0e 94 04 01 	call	0x208	; 0x208 <do_rand>
 2a8:	08 95       	ret

000002aa <srand>:
 2aa:	a0 e0       	ldi	r26, 0x00	; 0
 2ac:	b0 e0       	ldi	r27, 0x00	; 0
 2ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2b2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2b6:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 2ba:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 2be:	08 95       	ret

000002c0 <__divmodsi4>:
 2c0:	05 2e       	mov	r0, r21
 2c2:	97 fb       	bst	r25, 7
 2c4:	1e f4       	brtc	.+6      	; 0x2cc <__divmodsi4+0xc>
 2c6:	00 94       	com	r0
 2c8:	0e 94 77 01 	call	0x2ee	; 0x2ee <__negsi2>
 2cc:	57 fd       	sbrc	r21, 7
 2ce:	07 d0       	rcall	.+14     	; 0x2de <__divmodsi4_neg2>
 2d0:	0e 94 92 01 	call	0x324	; 0x324 <__udivmodsi4>
 2d4:	07 fc       	sbrc	r0, 7
 2d6:	03 d0       	rcall	.+6      	; 0x2de <__divmodsi4_neg2>
 2d8:	4e f4       	brtc	.+18     	; 0x2ec <__divmodsi4_exit>
 2da:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__negsi2>

000002de <__divmodsi4_neg2>:
 2de:	50 95       	com	r21
 2e0:	40 95       	com	r20
 2e2:	30 95       	com	r19
 2e4:	21 95       	neg	r18
 2e6:	3f 4f       	sbci	r19, 0xFF	; 255
 2e8:	4f 4f       	sbci	r20, 0xFF	; 255
 2ea:	5f 4f       	sbci	r21, 0xFF	; 255

000002ec <__divmodsi4_exit>:
 2ec:	08 95       	ret

000002ee <__negsi2>:
 2ee:	90 95       	com	r25
 2f0:	80 95       	com	r24
 2f2:	70 95       	com	r23
 2f4:	61 95       	neg	r22
 2f6:	7f 4f       	sbci	r23, 0xFF	; 255
 2f8:	8f 4f       	sbci	r24, 0xFF	; 255
 2fa:	9f 4f       	sbci	r25, 0xFF	; 255
 2fc:	08 95       	ret

000002fe <__muluhisi3>:
 2fe:	0e 94 b4 01 	call	0x368	; 0x368 <__umulhisi3>
 302:	a5 9f       	mul	r26, r21
 304:	90 0d       	add	r25, r0
 306:	b4 9f       	mul	r27, r20
 308:	90 0d       	add	r25, r0
 30a:	a4 9f       	mul	r26, r20
 30c:	80 0d       	add	r24, r0
 30e:	91 1d       	adc	r25, r1
 310:	11 24       	eor	r1, r1
 312:	08 95       	ret

00000314 <__mulshisi3>:
 314:	b7 ff       	sbrs	r27, 7
 316:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__muluhisi3>

0000031a <__mulohisi3>:
 31a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <__muluhisi3>
 31e:	82 1b       	sub	r24, r18
 320:	93 0b       	sbc	r25, r19
 322:	08 95       	ret

00000324 <__udivmodsi4>:
 324:	a1 e2       	ldi	r26, 0x21	; 33
 326:	1a 2e       	mov	r1, r26
 328:	aa 1b       	sub	r26, r26
 32a:	bb 1b       	sub	r27, r27
 32c:	fd 01       	movw	r30, r26
 32e:	0d c0       	rjmp	.+26     	; 0x34a <__udivmodsi4_ep>

00000330 <__udivmodsi4_loop>:
 330:	aa 1f       	adc	r26, r26
 332:	bb 1f       	adc	r27, r27
 334:	ee 1f       	adc	r30, r30
 336:	ff 1f       	adc	r31, r31
 338:	a2 17       	cp	r26, r18
 33a:	b3 07       	cpc	r27, r19
 33c:	e4 07       	cpc	r30, r20
 33e:	f5 07       	cpc	r31, r21
 340:	20 f0       	brcs	.+8      	; 0x34a <__udivmodsi4_ep>
 342:	a2 1b       	sub	r26, r18
 344:	b3 0b       	sbc	r27, r19
 346:	e4 0b       	sbc	r30, r20
 348:	f5 0b       	sbc	r31, r21

0000034a <__udivmodsi4_ep>:
 34a:	66 1f       	adc	r22, r22
 34c:	77 1f       	adc	r23, r23
 34e:	88 1f       	adc	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	1a 94       	dec	r1
 354:	69 f7       	brne	.-38     	; 0x330 <__udivmodsi4_loop>
 356:	60 95       	com	r22
 358:	70 95       	com	r23
 35a:	80 95       	com	r24
 35c:	90 95       	com	r25
 35e:	9b 01       	movw	r18, r22
 360:	ac 01       	movw	r20, r24
 362:	bd 01       	movw	r22, r26
 364:	cf 01       	movw	r24, r30
 366:	08 95       	ret

00000368 <__umulhisi3>:
 368:	a2 9f       	mul	r26, r18
 36a:	b0 01       	movw	r22, r0
 36c:	b3 9f       	mul	r27, r19
 36e:	c0 01       	movw	r24, r0
 370:	a3 9f       	mul	r26, r19
 372:	70 0d       	add	r23, r0
 374:	81 1d       	adc	r24, r1
 376:	11 24       	eor	r1, r1
 378:	91 1d       	adc	r25, r1
 37a:	b2 9f       	mul	r27, r18
 37c:	70 0d       	add	r23, r0
 37e:	81 1d       	adc	r24, r1
 380:	11 24       	eor	r1, r1
 382:	91 1d       	adc	r25, r1
 384:	08 95       	ret

00000386 <_exit>:
 386:	f8 94       	cli

00000388 <__stop_program>:
 388:	ff cf       	rjmp	.-2      	; 0x388 <__stop_program>
